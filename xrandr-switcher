#!/usr/bin/env python3
import re
import subprocess
import sys
import argparse

ACTIONS = ['switch', 'status']
PRIMARY_OUT = 'eDP1'
VERBOSE = 0

###########################################
def run_xrandr(arg_list):
    '''run_xrandr(arg_list) -> string

Runs xrandr with given arguments and returns the output
'''
    command = 'xrandr ' + ' '.join(arg_list)
    if VERBOSE:
        print("log: running # " + command)

    return subprocess.getoutput(command)


###########################################
def run_xrandr_out(output, arg_list):
    '''run_xrandr_out(output, arg_list) -> ()

Runs xrandr for given output with given arguments and returns the output
'''
    return run_xrandr(['--output', output] + arg_list)


###########################################
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Display switcher')
    parser.add_argument('action', metavar='action', choices=ACTIONS,
                        nargs='?', default='status',
                        help='action to be performed (one of {' +
                        ', '.join(ACTIONS) + '})')
    parser.add_argument('-v', '--verbose', help='increase verbosity level',
                        action='store_true')

    try:
        args = parser.parse_args()
    except Exception as ex:
        errprint(str(ex))

    if args.verbose:
        VERBOSE = 1

    xrandr_out = run_xrandr(['-d', ':0.0'])
    connected_lines = []
    for line in xrandr_out.split('\n'):
        if re.search(r'\bconnected', line):
            connected_lines.append(line)

    dev_connected = []
    for line in connected_lines:
        m = re.match(r'^\w+\b', line)
        dev_connected.append(m.group(0))

    dev_active = []
    for line in connected_lines:
        if re.search(r'\bconnected (primary )?[0-9]+', line):
            m = re.match(r'^\w+\b', line)
            dev_active.append(m.group(0))

    assert len(dev_connected) in {1, 2}

    secondary_out = ''
    if len(dev_connected) == 2:
        secondary_out = set(dev_connected) - {PRIMARY_OUT}
        assert len(secondary_out) == 1
        secondary_out = secondary_out.pop()

    if args.action == 'switch':
        if len(dev_connected) == 1:
            # run_xrandr(['--output HDMI2', '--off'])
            run_xrandr_out(PRIMARY_OUT, ['--auto'])
            sys.exit(0)

        if len(dev_active) == 2:
            run_xrandr_out(PRIMARY_OUT, ['--auto'])
            run_xrandr_out(secondary_out, ['--off'])
        elif dev_active == [PRIMARY_OUT]:
            run_xrandr_out(PRIMARY_OUT, ['--off'])
            run_xrandr_out(secondary_out, ['--auto'])
        elif dev_active == [secondary_out]:
            run_xrandr_out(PRIMARY_OUT, ['--auto'])
            run_xrandr_out(secondary_out, ['--right-of ' + PRIMARY_OUT, '--auto'])
        else:
            assert False
    else:
        assert args.action == 'status'

        print(connected_lines)
        print('Connected devices:  ' + ' '.join(dev_connected))
        print('Active devices:     ' + ' '.join(dev_active))
        print('Primary output:     ' + PRIMARY_OUT)
        print('Secondary output:   ' + ('None' if not secondary_out else secondary_out))
